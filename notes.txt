function personFactory(name) {
  const object = {
    name,
    talk() {
      return `Hello I am  ${this.name}`;
    },
  };
  return object;
}

const me = personFactory("nico.");
console.log(me.talk());

const didi = personFactory("Didi Wu TinTin");
console.log(didi.talk());

const siggy = personFactory("Siggy");
console.log(siggy.talk());
// ---------------
// function creatElement (typeOfElement, textThatGoesInside, colorOfElement )
function creatElement(type, text, color) {
  const element = document.createElement(type);
  element.innerText = text;
  element.style.color = color;
  document.body.append(element);
  return {
    element,
    setText(text) {
      element.innerText = text;
    },
    setColor(color) {
      element.style.color = color;
    },
  };
}

const h1 = creatElement("h1", "Hello I am nico.", "white");
h1.setColor("black");
h1.setText("hello I am not nico anymore");
// Factory Function vs. Constructor vs. Class -

//Factory Function

function createPerson(name) {
  return {
    name,
    talk() {
      return `Hello my name is ${this.name}`;
    },
  };
}
const me = createPerson("nico.");
const didi = createPerson("Didi Wu TinTin");
const siggy = createPerson("Siggy");
console.log(me.talk());
console.log(didi.talk());
console.log(siggy.talk());

//Constructor
function Person(name) {
  this.name = name;
}

Person.prototype.talk = function () {
  return `Hello, I am ${this.name}`;
};

const milo = new Person("Milo");
console.log(milo.talk());

const cami = new Person("Camila");
console.log(cami.talk());

// classes are just constuctores


const personFactory = (name, age) => {
  const sayHello = () => console.log(`Hello I am ${name}`);
  return { name, age, sayHello };
};

const nico = personFactory("nico.", 34);
console.log(nico);
nico.sayHello();

const Person = function (name, age) {
  this.name = name;
  this.age = age;
  this.sayHello = () => {
    console.log(`Hello, I am ${this.name}`);
    // console.log(this);
  };
};

const didi = new Person("didi Wu TiTin", 3);
console.log(didi);
didi.sayHello();

let name1 = "nico";
let num = 34;
let color = "black";
let food = "Burger";
console.log(name1, num, color, food);
console.log({ name1, num, color, food });
//Scope and closure

let a = 99;

const func = (x) => {
  let a = x;
};

func(99);

console.log(a);

// Closures
function human(name) {
  function sayHi() {
    console.log(`Hello, my name is ${name}`);
  }
  function howYouFeel() {
    console.log(`${name} feeling Good!`);
  }
  return {
    sayHi,
    howYouFeel,
  };
}
human("nico");
const nico = human("nico");
const didi = human("Didi wu TinTin");
didi.sayHi();
didi.howYouFeel();

//  module
var Module = (function () {
  return {
    myMethod: function () {
      console.log("myMethod has been called.");
    },
  };
})();

// call module + methods
Module.myMethod();

const factoryFunctions = (string) => {
  const capString = () => string.toUpperCase();
  const printString = () => console.log(`---${capString()}---`);
  return { printString };
};

const milo = factoryFunctions("Milo");
milo.printString();

const miloFactori = (string) => {
  const capMilo = () => string.toUpperCase().concat(" FAT");
  const printMilo = () => {
    console.log(`<<<<< ${capMilo()} >>>>>`);
  };
  return { printMilo };
};

const nico = miloFactori("nico");

nico.printMilo();

const counterCreator = () => {
  let count = 0;
  return () => {
    console.log(count);
    count++;
  };
};
const counter = counterCreator();

counter();
counter();
counter();
counter();
counter();

const Player = (name, level) => {
  let health = level * 2;
  const getLevel = () => level;
  const getName = () => name;
  const die = () => {
    console.log("GAME OVER");
  };
  const damage = (x) => {
    health -= x;
    if (health <= 0) {
      die();
    }
  };
  const attack = (enemy) => {
    if (level < enemy.getLevel()) {
      damage(1);
      console.log(`${enemy.getName()} has damaged ${name}`);
    }
    if (level >= enemy.getLevel()) {
      enemy.damage(1);
      console.log(`${name} has damaged ${enemy.getName()}`);
    }
  };
  return { attack, damage, getLevel, getName };
};

const jimmie = Player("jim", 10);
const badGuy = Player("jeff", 1);
jimmie.attack(badGuy);
jimmie.attack(badGuy);
const Person = (name) => {
  const sayName = () => {
    console.log(`my name is ${name}.`);
  };
  return { sayName };
};

const nico = Person("nico", 34);
nico.sayName();

// const Nerd = (name, stuff) => {
//   const { sayName } = Person(name);
//   const doSomething = () => {
//     console.log(`Nerd Stuff: ${stuff}`);
//   };
//   return { sayName, doSomething };
// };

// const milo = Nerd("Milo", "Drink from the toilet");
// milo.sayName();
// milo.doSomething();

const Nerd = (name) => {
  const prototype = Person(name);
  const doSomething = () => {
    console.log("Nerd stuff");
  };
  return Object.assign({}, prototype, { doSomething });
};
const milo = Nerd("Milo", "Drink from the toilet");
milo.sayName();
milo.doSomething();

const jsSkill = {
  knowsJs() {
    return true;
  },
};

const engDegree = {
  hasDegree() {
    return true;
  },
};

const backendSkill = {
  knowsBackend() {
    return true;
  },
};

const jsEngeneer = Object.assign({}, jsSkill, engDegree);
const fullstack = Object.assign({}, jsEngeneer, backendSkill);
console.log(fullstack.knowsJs());
console.log(fullstack.hasDegree());
console.log(fullstack.knowsBackend());
// Object.assign() functions mixins
const humanFactory = function (obj) {
  let isCrying = false;

  return Object.assign({}, obj, {
    cry() {
      isCrying = true;
      return this;
    },
    isCrying() {
      return isCrying;
    },
  });
};

const flyFactory = function (obj) {
  let isflying = false;

  return Object.assign({}, obj, {
    fly() {
      isflying = true;
      return this;
    },
    isflying() {
      return isflying;
    },
  });
};

const superman = humanFactory(flyFactory({}));
console.log(superman.fly().cry().isCrying());
const proto = {
  hello: function () {
    return `Hi my name is ${this.name}`;
  },
  age: function () {
    return `I am ${this.years} years old`;
  },
};

const animal = {
  greet: function () {
    return `I am a ${this.species}`;
  },
};

const nico = Object.create(proto);
for (const key in animal) {
  if (animal.hasOwnProperty(key)) {
    nico[key] = animal[key];
  }
}
nico.name = "nico";
nico.years = 34;
nico.species = "Neanderthal";
console.log(nico.hello());
console.log(nico.age());
console.log(nico.greet());
const milo = Object.assign({}, proto, {
  name: "Milo",
  years: 10,

  say() {
    return "Woof";
  },
});
console.log(milo.age());
console.log(milo.hello());
console.log(milo.say());

const me = "Nico";

function herro() {
  console.log(`Herro it me ` + me);
}
herro();
console.log(nico);

//closures

// function outer() {
//   const outerVar = "Hey I am an outer var";
//   function inner() {
//     const innerVar = "Hey I am an inner var";
//     console.log(innerVar);
//     console.log(outerVar);
//   }
//   return inner;
// }

// const innerFn = outer();
// innerFn();
function createGreeting(greeting = "") {
  const myGreet = greeting.toUpperCase();
  return function (name) {
    return `${myGreet} ${name}`;
  };
}

const sayHelloformal = createGreeting("Hello How are you?");
const sayHelloRude = createGreeting("What Up?");

console.log(sayHelloRude("nico"));
console.log(sayHelloformal("nico"));
//closures

function createGame(gameName) {
  let score = 0;
  return function win() {
    score++;
    return `Your name  ${gameName} your score ${score} `;
  };
}

const hockeyGame = createGame("Hockey");
const soccerGame = createGame("Soccer");

console.log(hockeyGame());
console.log(hockeyGame());
console.log(hockeyGame());
console.log(hockeyGame());
console.log(soccerGame());
console.log(soccerGame());
console.log(soccerGame());

//Constructors
function C() {}
let c = new C();
console.log(c instanceof C);
console.log(c.constractor === C());
console.log("_______");
C.prototype = { prototype_prop: "proto" };
console.log(c.constractor === C());
console.log(c instanceof C);
//Factory Functions

function factoryFunction(str) {
  const obj = Object.create(factoryFunction.prototype);
  obj.str = str;
  return obj;
}
const nico = factoryFunction("nico");
console.log(nico);

// const Formatter = (function () {
//   const log = (message) => console.log(`[${Date.now()}] Logger: ${message}`);
// })();
// const Formatter = (function () {
//   console.log("Start");
//   const log = (message) => console.log(`[${Date.now()}] Logger: ${message}`);
// })();

const myModual = {
  name: "nico",
  age: 34,
  sayName() {
    console.log(` my name is ${this.name}`);
  },
  setName(newName) {
    this.name = newName;
  },
};
myModual.setName("Milo");
myModual.sayName();
const people = (function () {
  let name = "nico";
  function sayName() {
    console.log(name);
  }

  return {
    sayMyname: sayName,
  };
})();
console.log(people);
people.sayMyname();

function makeFunc() {
  const name = "nachoooos";
  function displayName() {
    console.log(name);
  }
  return displayName;
}

const myFunc = makeFunc();
myFunc();

let score = (function () {
  let points = 0;
  return function () {
    points++;
    return points;
  };
})();

console.log(score());
console.log(score());
console.log(score());
